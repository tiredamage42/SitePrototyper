/*

    Site Prototyper (an in-browser html/css/js editor)
    Copyright (C) 2020  Andres Gomez

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/


/*
    handle exporting teh editor contents to a downloadable project zip
    containing an html, css, and js file
*/

import { assertHTMLIsWithinHTMLTags } from './html-parsing.js';

const appName = 'Site Prototyper';
const appURL = 'https://tiredamage42.github.io/SitePrototyper/';

const generatedFileMessage = `
    File generated by ${appName} [ ${appURL} ].
    Please check for any syntax errors before using in deployment!
`;

const commentMessagePrefix = `
/*
    ${generatedFileMessage}
*/
`;

const htmlFileName = 'index.html';
const jsFileName = 'app.js';
const cssFileName = 'style.css';

export function exportProject (html, css, js) {
    // prompt the user to choose a name for the project
    let projectName = prompt("Choose A Project Name");

    // user cancelled
    if (!projectName)
        return;

    // check if project name empty
    projectName = projectName.trim();
    if (projectName === '') {
        alert('Project Export Name Cannot Be Empty!');
        return;
    }

    // get the html string as a node structure
    let htmlNode = assertHTMLIsWithinHTMLTags (html);

    // reconstruct html as string
    let finalHTML = `
<!--
        ${generatedFileMessage}
-->

<html>
    <head>
        ${htmlNode.getElementsByTagName('head')[0].innerHTML}

        <!-- generated styles -->
        <link rel="stylesheet" type="text/css" href="${cssFileName}" />
    </head>
    <body>
        ${htmlNode.getElementsByTagName('body')[0].innerHTML}

        <!-- generated scripts -->
        <script charset="utf-8" type="text/javascript" src="${jsFileName}"></script>
    </body>
</html>
    `;


    // the final text for the js and css files (prefixed witht he auto generated comment)
    let finalJS = commentMessagePrefix + js;
    let finalCSS = commentMessagePrefix + css;

    // zip the files into one directory
    let zip = new JSZip();

    // Generate a directory within the Zip file structure
    let project = zip.folder(projectName);
    project.file(htmlFileName, finalHTML);
    project.file(cssFileName, finalCSS);
    project.file(jsFileName, finalJS);

    // Generate the zip file asynchronously
    zip.generateAsync( { type:"blob" } ).then(
        (content) => {

            const url = URL.createObjectURL(content);

            // Create a new anchor element
            const a = document.createElement('a');

            // Set the href and download attributes for the anchor element
            a.href = url;
            a.download = projectName + ".zip";

            // Click handler that releases the object URL after the element has been clicked
            // This is required for one-off downloads of the blob content
            const linkClickHandler = () => {
                setTimeout(() => {
                    URL.revokeObjectURL(url);
                    a.removeEventListener('click', linkClickHandler);
                }, 150);
            };

            // Add the click event listener on the anchor element
            a.addEventListener('click', linkClickHandler, false);

            // Programmatically trigger a click on the anchor element
            a.click();
        }
    );
}

